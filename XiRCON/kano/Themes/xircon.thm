#non display stuff
nt themename {xircon basic}
set vers {{default theme! ugh}}

#kano stuff
nt awaypubform {is gone, [raw_args] \[l/%msglog p/%page\]}
nt awayform {[raw_args] \[l/%msglog p/%page since/[string trimleft [clock format [unixtime] -format %I:%M] 0][string tolower [string index [clock format [unixtime] -format %p] 0]]\]}
nt backform {has returned, [raw_args] \[gone/%gone\]}
nt xdccstart {[llength [get_cookie xdcc]] packs offered:}
nt xdcclist {#%num [format "%-12s (%4s) \[%2s gets\]: %desc" {%file} {%size} {%gets}]}
nt xdccend {/ctcp [my_nick] XDCC SEND #N to get pack #N}
nt chanwallops {\[WallOp:[channel]\] [raw_args]}
nt chanwallx {\[WallExcept:[channel]:[nick2nick [lindex [args] 0]]\] [join [lrange [args] 1 end]]}
nt socketfailed {[kano] %type socket creation failed: %error.}
nt rot14 {[k nick]<[nick][k default]:[k highlight]ROT-14[k nick]> [k public][rot [string trimleft [join [lrange [args] 1 end]] §]]}
nt ident {[kano] Returned ident request from %host: [k highlight][get_cookie ident(user)][k default].}
nt identoff {[kano] Recieved ident request from %host; ignoring because ident is off.}
nt page {[kano] [k nick][nick][k ctcp] paged you!}
nt sound {[kano] [k highlight]([file tail [lindex [split [lindex [args] 2]] 0]]) [k nick]* [nick][k public] [lrange [args] 3 end]}
nt mysound {[k highlight]([file tail [lindex [args] 0]])[k nick] * [my_nick][k public] [lrange [args] 1 end]}
nt autoignoreall {[kano] Ignored *!*@* for 30 seconds. I think I smell a flood.}
nt autoignore {[kano] %type flood from [nick]![user]@[host]; ignoring for 30secs.}
nt unignore {[kano] Unignoring %host (autoignored).}
nt dictsearching {[kano] Searching for: [arg]}
nt dicterr {[kano] Dictionary server error: %dict}
nt dicterrnotfound {[kano] Dictionary: %word not found; no suggestions}
nt dicterrfound {[kano] Spelling error in %word. Suggestions:}
nt dictfound {[kano] Definition for %word:}
nt dictdef {[kano] %gets}
nt dictunknown {[kano] %gets}
nt tempkickban {[kano] Unbanning [lindex [args] 0] in [lindex [args] 1].}
nt tkbunban {[kano] TempKickBan: Unbanning %host on %chan.}
nt topiclock {[kano] Channel topic locked for [channel].}
nt topicunlock {[kano] Channel topic locked for [channel].}
nt addperm {[kano] Added %nick (%user) from permban.}
nt remperm {[kano] Removed %nick (%user) from permban.}

##basic stuff
nt dcctext {[k nick]<[nick]>[k private] [lindex [args] 0]}
nt dccact {[k nick]* [nick][k private] [lrange [lindex [args] 0] 1 end]}
nt myaction {[k nick]* [my_nick][k public] %text}
nt action {[k nick]* [nick][k private] %text}
nt actionnoquery {[k nick]*[nick] [k private][lindex [args] 2]}
nt pubmsg {[k nick]<[nick]>[k public] %text}
nt mymsg {[k nick]<[my_nick]>[k public] %text}
nt mymsgnoquery {[k nick]-> *%nick*[k public] %text}
nt msg {[k nick]<[nick]>[k private] %text}
nt msgnoquery {[k nick]*[nick]*[k private] %text}
nt pubnotice {[k nick]-[nick]:[lindex [args] 0]-[k pub] %text}
nt notice {[k nick]-[nick]-[k priv] %text}
nt servnotice {[k nick]-[host]-[k priv] %text}
nt mynotice {[k nick]-[my_nick]- %text}
nt mynoticenoquery {[k nick]-> -[lindex [args] 0]- %text}
nt highlight {[k highlight]<[nick]> %text}

proc defthm {} {
    global user
    set end ""
    set ig [get_user $user ignore]
    set in [get_user $user notes]
    set it [get_user $user notify]
    if {$ig != ""} {lappend end "ignore: $ig"}
    if {$it == "Y"} {lappend ind notify}
    if [catch {llength $in}] {return}
    foreach i $in {
	if [catch {llength $i}] continue
	set j [lindex $i 0]
	if {$j == "perm"} {lappend end permban}
	if {$j == "protect"} {
	    lappend end "prot: [join [lindex $i 1] ", "]"
	}
	if {$j == "bot"} {lappend end bot}
    }
    if {$end != ""} {
	return ": [join $end /]"
    } {return}
}

nt joincountry {}
nt join {[kano][k join] Join: [k nick][nick][k join] ([user]@[host]![country [lrange [split [host] .] end end]])}
nt ujoin {[t join] (user $mask[defthm])}
nt myjoin {[kano][k join] Now talking in [k chan][lindex [args] 0][k join].}
nt part {[kano][k part] Part: [k nick][nick][k part] ([user]@[host])}
nt quit {[kano][k quit] Quit: [k nick][nick][k quit] ([arg][k quit])}
nt kick {[kano] [k nick][lindex [args] 1][k part] has been kicked from [k chan][lindex [args] 0][k part] by [k nick][nick][k part] ([lindex [args] 2][k part])}
nt kickedyou {[kano] [k nick][nick][k part] kicked you from [k channel][lindex [args] 0][k part] ([lindex [args] 2])}
nt modechange {[kano][k change] Mode change \"[k mode][lindex [args] 1]%mode[k change]\" by [k nick]%nick}

nt mynick {[kano] [k change]Your nickname is now [k nick][arg]}
nt nick {[kano] [k nick][nick][k change] is now known as [k nick][lindex [args] 0]}
nt wallops {[kano] Wallops: [arg]}

nt dccbegin {[kano] Connection to [lindex [args] 1] established; %fileetc}
nt dccdone {[kano] Completed DCC [string tolower [lindex [args] 0]] of [lindex [args] 2] [expr {[lindex [args] 0] == "SEND" ? "to" : "from"}] [lindex [args] 1] at [lindex [args] 4]k/s.}
nt dccerr {[kano] [k error]Error: DCC connection closed ([lindex [args] 2]) [expr {[lindex [args] 0] == "SEND" ? "to" : "from"}] [lindex [args] 1].}
nt dccreq {[kano] DCC send request ([lindex [args] 2], [expr [lindex [args] 3] / 1024]K) from [lindex [args] 1].}
nt dccsend {[kano] Attempting to send [lindex [args] 2] to [lindex [args] 1].}

nt getnick {[kano] Getting nick [arg].}
nt getnickerr {[kano] Your nick is already [nick]!}
nt cycleforops {[kano] Cycling %chan to gain ops.}
nt newconn {[kano] Attempting to connect to [lindex [args] 0]:[lindex [args] 1]}
nt closedconn {[kano] Connection closed.}
nt tclconsoleinput {[k h]% [join [lrange [args] 1 end]]}
nt notifyon {[kano] [k nick][nick][k d] ([user]@[host]) is on IRC.}
nt notifyoff {[kano] [k nick][nick][k d] ([user]@[host]) has left IRC.}
nt invitedyou {[k default][kano] [k nick][nick][k default] invites you to join [k channel][lindex [args] 1][k default]. Press [k highlight]Ctrl+I[k default] to join chan.}
nt ctcpreply {[kano] [k ctcp]CTCP [lindex [args] 1] reply from [k nick][nick][k ctcp]: %reply}
nt ctcptimereply {[kano] [k ctcp]CTCP [lindex [args] 1] reply from [k nick][format %-9s [nick]][k ctcp]: %reply}
nt ctcpcloaked {[kano] [k ctcp]CTCP [lindex [args] 1] from [k nick][nick][k ctcp]%to; ignoring (cloak)}
nt myctcp {[k ctcp]-> \[[lindex [args] 0]\] [join [lrange [args] 1 end]]}
nt xdcc {[kano] [k ctcp]CTCP [lindex [args] 1] [lindex [args] 2] from [k nick][nick]}
nt ctcp {[kano] [k ctcp]CTCP %cmd from [k nick][nick][k ctcp]%to}

##raw stuff
nt stats {[kano] [lindex [args] 1] [lrange [args] 2 end]}
nt motd {[kano] [lrange [args] 1 end]}
nt dline {[kano] Line: [lrange [args] 1 end]}
nt umode {[kano] Your usermode is now [k mode][lindex [args] 1]}
nt lusercrap {[kano] [lrange [args] 1 end]}
nt admincrap {[kano] [lrange [args] 1 end]}
nt overloaded {[kano] [lrange [args] 1 end]}
nt silenced {[kano] [lrange [args] 1 end]}
nt killed {[kano] [k nick][string trimright [lindex [args] 8] .][k default] was killed by [k nick][lindex [args] 10][k default] [join [lrange [args] 13 end]]}
nt trace {[kano] [format %-9s [lindex [args] 1]]: [lrange [args] 1 end]}
nt line {[kano] Line: [lrange [args] 1 end]}
nt away {[kano] You are now away.}
nt notaway {[kano] You are no longer away.}
nt helpful {[kano] [lrange [args] 1 end]}

nt wwnick {[kano] \[[k nick]Nick Was[k d]\] [k nick][lindex [args] 1]}
nt wwaddr {[kano] \[[k nick]Address [k default]\] [lindex [args] 2]@[lindex [args] 3] ([country [lrange [split [lindex [args] 3] .] end end]])}
nt wwname {[kano] \[[k nick]Realname[k default]\] [lindex [args] 5]}

nt witop {}
nt winick {[kano] \[[k nick]Nick    [k d]\] [k nick][lindex [args] 1]}
nt wiaddr {[kano] \[[k nick]Address [k default]\] [lindex [args] 2]@[lindex [args] 3] ([country [lrange [split [lindex [args] 3] .] end end]])}
nt winame {[kano] \[[k nick]Realname[k default]\] [lindex [args] 5]}
nt wichan {[kano] \[[k nick]Channels[k default]\] [k channel][lindex [args] 2]}
nt wiserv {[kano] \[[k nick]Server  [k default]\] [lindex [args] 2]}
nt wiaway {[kano] [k nick][lindex [args] 1][k default] is away: [lindex [args] 2]}
nt wiidle {[kano] \[[k nick]Idle    [k default]\] [since [lindex [args] 2]]}
nt wisign {[kano] \[[k nick]SignOn  [k d]\] [clock format [lindex [args] 3] -format {%m/%d/%y %H:%M:%S %Z}]}
nt wioper {[kano] \[[k nick]IRCOp   [k default]\] [join [lrange [args] 2 end]]}

nt isaway {[kano] [lindex [args] 1] is away: [lindex [args] 2]}
nt ismode {[kano] [k channel][lindex [args] 1][k default] is [k mode][lindex [args] 2] [lindex [args] 3]}
nt notopic {[kano] No topic is set on [k channel][lindex [args] 1]}
nt istopic {[kano] Topic for [k channel][lindex [args] 1][k default] is [k mode]\"[lindex [args] 2]\"[k default]}
nt settopic {[kano] Topic for [k channel][lindex [args] 1][k default] was set by [k nick][lindex [args] 2][k default] on [clock format [lindex [args] 3]]}
nt topicchange {[kano][k change] Topic changed to \"[lindex [args] 1][k change]\" by [k nick][nick]}
nt topiclocked {[kano] Channel topic locked. Switching back...}
nt inviting {[kano] Inviting [k nick][lindex [args] 1][k default] to [k channel][lindex [args] 2]}
nt summoning {[kano] Summoning [lindex [args] 1] to IRC}
nt atversion {[kano] [lindex [args] 2] is at version [lindex [args] 1][lindex [args] 3]: [lindex [args] 4]}
nt who {[format "[kano] [k chan]%-10s[k nick] %-9s[k d] %8s@%-21s %4s %-2s %s" %blah]} ;#%blah is replaced with seven or eight different values. blah.
nt users {[kano] [k channel][lindex [args] 2][k default] users: [k nick][lindex [args] 3]}
nt bans {[kano] [k channel][lindex [args] 1]:[k default] [format %-30s [lindex [args] 2]] by [k nick][lindex [split [lindex [args] 3] !] 0][k default]([format %-31s [lindex [split [lindex [args] 3] !] 1])] at [clock format [lindex [args] 4] -format {%m/%d/%y %H:%M:%S %Z}]}
nt nowoper {[kano] You are now an IRCop!}
nt time {[kano] [lindex [args] 1]'s current time is: [lindex [args] 2]}
nt user {[kano] [lrange [args] 1 end]}
nt nosuchnick {[kano][k e] No such nick [k nick][lindex [args] 1]}
nt nosuchserver {[kano][k e] No such server [k default][lindex [args] 1]}
nt invalidchan {[kano][k e] Invalid channel [k chan][lindex [args] 1]}
nt cannotsendmoderated {[kano][k e] Cannot send to [k chan][lindex [args] 1]}
nt toomanychans {You've joined too many channels, and can't join [k chan][lindex [args] 1]}
nt wasnonick {[kano][k e] There was no nickname [k nick][lindex [args] 1]}
nt occurs {[kano][k e] [k default][lindex [args] 1][k error] occurs more than once; no message sent}
nt pingorigin {[kano][k e] No ping/pong origin specified}
nt notext {[kano][k e] You forgot the message part; no text to send.}
nt notoplvl {[kano][k e] No toplevel domain specified for [k default][lindex [args] 1][k e].}
nt topwild {[kano][k e] Wildcard in toplevel domain (can't do that!) for [k default][lindex [args] 1]}
nt cmdunknown {[kano][k e] [k default][lindex [args] 1][k error]: unknown command}
nt noadmin {[kano][k e] No admin information for [k default][lindex [args] 1]}
nt nonickgiven {[kano][k e] No nickname given.}
nt badnick {[kano][k e] [k default][lindex [args] 1][k error]: erroneous nickname.}
nt nickinuse {[kano][k e] The nickname [k default][lindex [args] 1][k error] is in use.}
nt nickcollision {[kano][k e] Nickname collision.}
nt notonchan {[kano][k e] [k nick][lindex [args] 1][k error] isn't on [k channel][lindex [args] 2]}
nt notinchan {[kano][k e] Stupid, you're not in [k channel][lindex [args] 1][k e].}
nt alreadyonchan {[kano][k e] [k nick][lindex [args] 1][k error] is already on [k channel][lindex [args] 2][k e].}
nt notlogged {[kano][k e] Sorry, [k default][lindex [args] 1][k error] isn't logged on; cannot summon him.}
nt summondisabled {[kano][k e] Sorry. Summon has been disabled.}
nt usersdisabled {[kano][k e] Users has been disabled.}
nt notregistered {[kano][k e] You have not registered.}
nt toofewparms {[kano][k e] Not enough parameters for [k default][lindex [args] 1][k e].}
nt alreadyregistered {[kano][k e] You've already registered.}
nt notprivileged {[kano][k e] Your host is not among the privileged.}
nt badpass {[kano][k e] Incorrect password.}
nt bannedfromserver {[kano][k e] You're banned from this server.}
nt keyset {[kano][k e] [k default][lindex [args] 1][k error]'s channel key already set.}
nt chanfull {[kano][k e] [k default][lindex [args] 1][k error] is full (+l).}
nt chaninvite {[kano][k e] Sorry, [k channel][lindex [args] 1][k error] is invite-only (+i).}
nt chanbanned {[kano][k e] Haha! You're banned from [k channel][lindex [args] 1][k e].}
nt chanbadkey {[kano][k e] Incorrect channel key for [k channel][lindex [args] 1][k error].}
nt banlistfull {[kano][k e] [k channel][lindex [args] 1][k error]: banlist is full (DALnet: 60 bans; Undernet: 30 bans; EFNet: 20 bans).}
nt nopermission {[kano][k e] Permission denied; you're not an IRCop.}
nt notop {[kano] [k channel][lindex [args] 1][k error]: you're not an op[expr {[isop [my_nick] [lindex [args] 1]] ? ". But you are! Desync is fun." : ""}]}
nt unknownmode {[kano][k e] [k default][lindex [args] 1][k error]: unknown /mode flag.}
nt serverkill {[kano][k e] You can't kill a server, you dork.}
nt notoper {[kano][k e] Your host doesn't have any O-lines.}
nt notyourmode {[kano][k e] You can't change other people's modes!}
nt silencefull {[kano][k e] Your silence list is full.}
nt nogline {[kano][k e] No such G-line [k default][lindex [args] 1][k e].}
nt created {[kano] [k channel][lindex [args] 1][k default] was created on [clock format [lindex [args] 2]]}

#new to kano12
nt dccs {$dccx(file)\[[filesize $dccx(upto)]/[filesize $dccx(size)]([format %.1f [expr $dccx(upto) / $dccx(size).0 * 100]]%)\]: $dccx(nick)/$dccx(pass) @$dccx(rate)k/s}
nt hashed {[kano] Hashed [llength [chanlist [lindex [args] 1]]] userhosts in ${t}sec}
nt split {[kano] split - [join [split [string range [raw_args] 1 end]] " / "]\n[kano] Hit Ctrl-F to see who split}
nt rejoin {[kano] join - [lindex $splitwin($swl) 2] / [lindex $splitwin($swl) 1]}
nt wiend {} ;#whois end (318)
nt wwend {} ;#whowas end (369)
nt banend {} ;#banlist end (368)
nt whoend {} ;#who end (315)
nt nameend {} ;#names end (366)
nt timestamp {[kano] Timestamp: [clock format [clock seconds] -format "%A, %B %d - %I:%M %p"]}

#new to kano13
nt except {[t bans]}
nt exceptend {[t banend]}
#nt ujoin: see above

#new to kano14
nt dnslookup {[kano] looking up $host}
nt dnsrelay {[kano] [concat ${litehelp}$dnsreq($request) ${darkhelp}([listify $m0])] -> [concat ${litehelp}$request ${darkhelp}([listify $m1])] -> [concat ${litehelp}$result ${darkhelp}([listify $m2])] \[^G=copy\]}
nt dnsfound {[kano] resolved [concat ${litehelp}$request ${darkhelp}([listify $m1])] to [concat ${litehelp}$result ${darkhelp}([listify $m2])] \[^G=copy\]}
nt dnsrevfail {[kano] resolved [concat ${litehelp}$dnsreq($request) ${darkhelp}([listify $m0])] to [concat ${litehelp}$request ${darkhelp}([listify $m1])], reverse lookup failed \[^G=copy\]}
nt dnsfail {[kano] could not resolve [concat $request ${darkhelp}([listify $m1])]}

nt wallmsg {\[wall[lindex [args] 0]\] [t pubmsg]}
nt wallnotice {\[wall[lindex [args] 0]\] [t pubnotice]}
